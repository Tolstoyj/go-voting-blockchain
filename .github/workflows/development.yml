name: Development Branch Protection

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec.sarif

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  test-development:
    runs-on: ubuntu-latest
    name: Development Tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379/0

    - name: Run integration tests
      run: go test -v -tags=integration ./...
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379/0

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: development
        name: development-coverage

  build-development:
    runs-on: ubuntu-latest
    name: Build Development
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build application
      run: go build -v -o voting-blockchain-dev cmd/api/main.go
    
    - name: Test binary
      run: |
        ./voting-blockchain-dev --help || echo "Binary built successfully"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: voting-blockchain-dev
        path: voting-blockchain-dev
        retention-days: 7

  docker-build-dev:
    runs-on: ubuntu-latest
    name: Docker Build Development
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build development Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: voting-blockchain:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm voting-blockchain:dev --help || echo "Docker image built successfully"

  notify-development:
    runs-on: ubuntu-latest
    name: Notify Development Status
    needs: [security-scan, code-quality, test-development, build-development, docker-build-dev]
    if: always()
    steps:
    - name: Notify success
      if: needs.security-scan.result == 'success' && needs.code-quality.result == 'success' && needs.test-development.result == 'success' && needs.build-development.result == 'success' && needs.docker-build-dev.result == 'success'
      run: |
        echo "✅ All development checks passed!"
        echo "Development branch is ready for feature development."
    
    - name: Notify failure
      if: needs.security-scan.result == 'failure' || needs.code-quality.result == 'failure' || needs.test-development.result == 'failure' || needs.build-development.result == 'failure' || needs.docker-build-dev.result == 'failure'
      run: |
        echo "❌ Some development checks failed!"
        echo "Please review the failed checks and fix the issues."
        exit 1
