version: '3.8'

services:
  # PostgreSQL Database - Production Configuration
  voting-postgres:
    image: postgres:15-alpine
    container_name: voting-blockchain-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-voting_blockchain}
      POSTGRES_USER: ${POSTGRES_USER:-voting_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Production PostgreSQL settings
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
    volumes:
      - voting_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - voting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-voting_user} -d ${POSTGRES_DB:-voting_blockchain}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache - Production Configuration
  voting-redis:
    image: redis:7-alpine
    container_name: voting-blockchain-redis-prod
    restart: unless-stopped
    volumes:
      - voting_redis_data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - voting-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Go Voting Blockchain API - Production Configuration
  voting-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-1.1.0}
        VCS_REF: ${VCS_REF}
    container_name: voting-blockchain-api-prod
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      # Server Configuration
      PORT: 8080
      GIN_MODE: release
      
      # Database Configuration
      DATABASE_URL: postgres://${POSTGRES_USER:-voting_user}:${POSTGRES_PASSWORD}@voting-postgres:5432/${POSTGRES_DB:-voting_blockchain}?sslmode=require
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@voting-redis:6379/0
      
      # Blockchain Configuration
      MINING_DIFFICULTY: ${MINING_DIFFICULTY:-4}
      BLOCK_REWARD: ${BLOCK_REWARD:-1.0}
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-168h}
      
      # Admin Configuration
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-Content-Type,Authorization,X-Requested-With}
      
      # Rate Limiting Configuration
      RATE_LIMIT_STRICT: ${RATE_LIMIT_STRICT:-10}
      RATE_LIMIT_MODERATE: ${RATE_LIMIT_MODERATE:-30}
      RATE_LIMIT_GENEROUS: ${RATE_LIMIT_GENEROUS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-1m}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
    depends_on:
      voting-postgres:
        condition: service_healthy
      voting-redis:
        condition: service_healthy
    networks:
      - voting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx Reverse Proxy - Production Configuration
  voting-nginx:
    image: nginx:alpine
    container_name: voting-blockchain-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - voting_nginx_logs:/var/log/nginx
    depends_on:
      - voting-api
    networks:
      - voting-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Monitoring - Prometheus (Optional)
  voting-prometheus:
    image: prom/prometheus:latest
    container_name: voting-blockchain-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - voting_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - voting-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  voting-grafana:
    image: grafana/grafana:latest
    container_name: voting-blockchain-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - voting_grafana_data:/var/lib/grafana
    networks:
      - voting-network
    profiles:
      - monitoring

volumes:
  voting_postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/voting-blockchain/data/postgres
  voting_redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/voting-blockchain/data/redis
  voting_nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/voting-blockchain/logs/nginx
  voting_prometheus_data:
    driver: local
  voting_grafana_data:
    driver: local

networks:
  voting-network:
    driver: bridge
    name: voting-blockchain-network-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16
